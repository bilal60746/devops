# .github/workflows/prod-laravel.yml
name: Prod CI/CD (Laravel)

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

concurrency:
  group: prod-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  PHP_VERSION: "8.2"
  NODE_VERSION: "20"

jobs:
  build:
    name: Build app (composer + npm)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl, pdo_mysql, bcmath, gd, zip, exif
          ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=1G
          coverage: none

      - name: Cache composer
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install PHP deps (no dev, optimized)
        run: |
          composer install --no-dev --prefer-dist --no-ansi --no-interaction --no-progress --optimize-autoloader

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}

      - name: Build frontend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi
          # Choose your build tool:
          if [ -f vite.config.* ]; then npm run build; fi
          if [ -f webpack.mix.js ]; then npm run production || true; fi

      - name: Prepare artifact
        run: |
          mkdir -p deploy
          rsync -a --delete \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude="tests" \
            --exclude="storage/logs/*" \
            --exclude="storage/framework/cache/*" \
            --exclude="storage/framework/sessions/*" \
            --exclude="storage/framework/views/*" \
            ./ deploy/
          # Include built assets (public/build or public/js/css, depending on your tool)
          if [ -d public/build ]; then rsync -a public/build deploy/public/; fi
          if [ -d public/js ]; then rsync -a public/js deploy/public/; fi
          if [ -d public/css ]; then rsync -a public/css deploy/public/; fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: laravel-dist
          path: deploy
          if-no-files-found: error
          retention-days: 3

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production   # (Optional) protect + require approvals in Settings â†’ Environments

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: laravel-dist
          path: dist

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Deploy via rsync
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.PROD_SSH_KNOWN_HOSTS }} # from `ssh-keyscan -t rsa your.host`
          DEPLOY_USER: ${{ secrets.PROD_SSH_USER }}
          DEPLOY_HOST: ${{ secrets.PROD_SSH_HOST }}
          DEPLOY_PATH: ${{ secrets.PROD_PATH }} # e.g. /var/www/myapp
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

          rsync -az --delete \
            --links \
            --exclude ".env" \
            dist/ "$DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH"

      - name: Run post-deploy commands (artisan, perms, optimize)
        env:
          DEPLOY_USER: ${{ secrets.PROD_SSH_USER }}
          DEPLOY_HOST: ${{ secrets.PROD_SSH_HOST }}
          DEPLOY_PATH: ${{ secrets.PROD_PATH }}
        run: |
          ssh "$DEPLOY_USER@$DEPLOY_HOST" << 'EOF'
            set -e
            cd "$DEPLOY_PATH"

            # Ensure correct permissions for storage/bootstrap
            mkdir -p storage/framework/{cache,sessions,views}
            chown -R www-data:www-data storage bootstrap/cache || true
            find storage -type d -exec chmod 775 {} \; || true
            find storage -type f -exec chmod 664 {} \; || true

            # Laravel maintenance window
            php artisan down || true

            # Composer autoload is already optimized in artifact, but safe to re-gen
            php artisan storage:link || true
            php artisan migrate --force
            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear
            php artisan event:clear
            php artisan optimize

            php artisan up || true
          EOF
